{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "This CloudFormation template describes the creation of the InnovateVA web server. SSH traffic will be allowed in through the bastion. Inbound HTTP(S) traffic will be limited to specific IPs.",

  "Parameters" : {

    "HostedZone" : {
      "Description" : "This is the hosted zone you will connect Jenkins to",
      "Type" : "String",
      "Default" : "singlestonedemo.com"
    },

    "S3Bucket" : {
      "Description" : "This is the s3 bucket where your cfn templates are stored",
      "Type" : "String",
      "Default" : "singlestonedemo"
    },

    "InstanceType" : {
      "Description" : "Enter t2.micro, m3.medium, m3.large, or m3.xlarge.  Default is t2.micro.",
      "Default" : "t2.micro",
      "Type" : "String",
      "AllowedValues" : [ "t2.micro","m3.medium","m3.large","m3.xlarge" ],
      "ConstraintDescription" : "Must be a valid EC2 instance type."
    },

    "IvaPrivateSubnetId" : {
      "Description" : "This parameter will pull in the Private Subnet ID returned from vpc.template.",
      "Type" : "String"
    },
    
    "IvaPrivateSubnetAZ" : {
      "Description" : "This parameter will pull in the Private Subnet AZ returned from vpc.template.",
      "Type" : "String"
    },

    "IvaPublicSubnetId" : {
      "Description" : "This parameter will pull in the Public Subnet ID returned from vpc.template.",
      "Type" : "String"
    },

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Default" : "innovate",
      "Type" : "String",
      "MinLength" : "1",
      "MaxLength" : "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },

    "SourceSecurityGroupOwnerId" : {
      "Description" : "This parameter identifies the AWS account number under which all resources live.",
      "Default" : "592342700041",
      "Type" : "String"
    },

    "VpcId" : {
      "Description" : "This parameter will pull in the VPC ID returned from vpc.template.",
      "Type" : "String"
    },
    
    "IvaVpcGatewayAttachment" : {
      "Description" : "This is the VPC Gateway Attachment.",
      "Type" : "String"
    },
    
    "IvaNatSecurityGroup" : {
      "Description" : "The instance ID of the NAT security group.",
      "Type" : "String"
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t2.micro"   : { "Arch" : "64" },
      "m1.small"   : { "Arch" : "64" },
      "m1.medium"  : { "Arch" : "64" },
      "m1.large"   : { "Arch" : "64" },
      "m1.xlarge"  : { "Arch" : "64" },
      "m2.xlarge"  : { "Arch" : "64" },
      "m2.2xlarge" : { "Arch" : "64" },
      "m2.4xlarge" : { "Arch" : "64" },
      "m3.medium"  : { "Arch" : "64" },
      "c1.medium"  : { "Arch" : "64" },
      "c1.xlarge"  : { "Arch" : "64" }
    },
    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "64" : "ami-b66ed3de" }
    }
  },

  "Resources" : {

    "RootRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/"
      }
    },
    "RolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "root",
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Action": "*",
            "Resource": "*"
          } ]
        },
        "Roles": [ {
          "Ref": "RootRole"
        } ]
      }
    },
    "RootInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {
          "Ref": "RootRole"
        } ]
      }
    },

    "DNS" : {
      "Type" : "AWS::Route53::RecordSetGroup",
      "Properties" : {
        "HostedZoneName" : { "Fn::Join" : [ "", [ { "Ref" : "HostedZone" }, "." ] ] },
        "Comment" : "DNS Alias for the InnovateVA App Elastic Load Balancer",
        "RecordSets" : [ {
          "Name" : { "Fn::Join" : [ "", [ { "Ref" : "HostedZone" }, "." ] ] },
          "Type" : "A",
          "AliasTarget" : {
            "DNSName" : { "Fn::GetAtt" : [ "IvaAppElasticLoadBalancer", "DNSName" ] },
            "HostedZoneId" : { "Fn::GetAtt" : [ "IvaAppElasticLoadBalancer", "CanonicalHostedZoneNameID" ] }
          }
        } ]
      }
    },

    "IvaAppElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "Subnets" : [ { "Ref" : "IvaPublicSubnetId" } ],
        "CrossZone" : "true",
        "Listeners" : [
          {
            "LoadBalancerPort" : "80",
            "InstancePort" : "8080",
            "InstanceProtocol" : "HTTP",
            "Protocol" : "HTTP"
          }
        ],
        "HealthCheck" : {
          "Target" : "HTTP:8080/",
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "30",
          "Timeout" : "5"
        },
        "Scheme" : "internet-facing",
        "SecurityGroups" : [ { "Ref" : "IvaPublicELBSecurityGroup" } ]
      }
    },

    "IvaAppLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "IamInstanceProfile": { "Ref" : "RootInstanceProfile" },
        "ImageId" : {
          "Fn::FindInMap" : [
            "AWSRegionArch2AMI",
            { "Ref" : "AWS::Region" },
            {
              "Fn::FindInMap" : [
                "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch"
              ]
            }
          ]
        },
        "InstanceMonitoring" : "true",
        "InstanceType" : { "Ref" : "InstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "SecurityGroups" : [ { "Ref" : "IvaAppSecurityGroup" } ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "# Make directories\n",
          "mkdir /var/log/newrelic\n",
          "mkdir -p /opt/chef\n",

          "# Grab and install Chef Client\n",
          "wget -O /tmp/chef-client.rpm       https://s3.amazonaws.com/", { "Ref" : "S3Bucket" }, "/binaries/chefdk-0.3.0-1.x86_64.rpm\n",
          "rpm -Uvh /tmp/chef-client.rpm\n",

          "# Grab configuration artifacts\n",
          "wget -O /tmp/hostname.sh           https://s3.amazonaws.com/", { "Ref" : "S3Bucket" }, "/chef/hostname.sh\n",
          "wget -O /opt/chef/client.rb        https://s3.amazonaws.com/", { "Ref" : "S3Bucket" }, "/chef/webclient.rb\n",
          "wget -O /opt/chef/node.json        https://s3.amazonaws.com/", { "Ref" : "S3Bucket" }, "/chef/webnode.json\n",

          "# Grab security artifacts\n",
          "wget -O /opt/chef/validator.pem    https://s3.amazonaws.com/", { "Ref" : "S3Bucket" }, "/chef/validator.pem\n",

          "# Set hostname\n",
          "bash /tmp/hostname.sh\n",
          "hostname InnovateVaApp\n",
          "export HOSTNAME=`/usr/bin/curl -s http://169.254.169.254/latest/meta-data/local-hostname`\n",

          "# Bootstrap App Server\n",
          "chef-client -c /opt/chef/client.rb -s 60\n",

          "# Notify completion\n",
          "touch /root/chef-complete"
        ]]}}
        }
    },

    "IvaAppAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : [ { "Ref" : "IvaPrivateSubnetAZ" } ],
        "DesiredCapacity" : "1",
        "HealthCheckGracePeriod" : "300",
        "HealthCheckType" : "ELB",
        "LaunchConfigurationName" : { "Ref" : "IvaAppLaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "2",
        "Tags" : [ {
          "Key" : "Name",
          "Value" : "InnovateVA App Server",
          "PropagateAtLaunch" : "true"
        } ],
        "VPCZoneIdentifier" : [ { "Ref" : "IvaPrivateSubnetId" } ],
        "LoadBalancerNames" : [ { "Ref" : "IvaAppElasticLoadBalancer" } ]
      }
    },

    "ScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "IvaAppAutoScalingGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "1"
      }
    },

    "ScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "IvaAppAutoScalingGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },

    "CPUAlarmHigh" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "Trigger an alarm if CPU utilization > 60% for 2 minutes",
        "EvaluationPeriods" : "2",
        "Statistic" : "Average",
        "Threshold" : "60",
        "Period" : "60",
        "AlarmActions" : [ { "Ref" : "ScaleUpPolicy" } ],
        "Namespace" : "AWS/EC2",
        "Dimensions" : [ {
          "Name" : "AutoScalingGroupName",
          "Value" : { "Ref" : "IvaAppAutoScalingGroup" }
        } ],
        "ComparisonOperator" : "GreaterThanThreshold",
        "MetricName" : "CPUUtilization"
      }
    },

    "CPUAlarmLow" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "Trigger an alarm if CPU utilization < 10% for 2 minutes",
        "EvaluationPeriods" : "2",
        "Statistic" : "Average",
        "Threshold" : "10",
        "Period" : "60",
        "AlarmActions" : [ { "Ref" : "ScaleDownPolicy" } ],
        "Namespace" : "AWS/EC2",
        "Dimensions" : [ {
          "Name" : "AutoScalingGroupName",
          "Value" : { "Ref" : "IvaAppAutoScalingGroup" }
        } ],
        "ComparisonOperator" : "LessThanThreshold",
        "MetricName" : "CPUUtilization"
      }
    },

    "InnovateParticipants": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": {
          "HashKeyElement": {
            "AttributeName": "PhoneNumber",
            "AttributeType": "S"
          }
        },
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "1",
          "WriteCapacityUnits": "1"
        },
        "TableName" : "InnovateParticipants"
      }
    },
    
    "IvaPublicELBSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Defines security group for InnovateVA public-facing Elastic Load Balancer. Allows inbound (web) traffic on ports TCP 80 and TCP 443.",
        "VpcId" : {
          "Ref" : "VpcId"
        },
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp" : "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "8080",
            "ToPort" : "8080",
            "DestinationSecurityGroupId" : { "Ref" : "IvaAppSecurityGroup" }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "8443",
            "ToPort" : "8443",
            "DestinationSecurityGroupId" : { "Ref" : "IvaAppSecurityGroup" }
          }
        ]
      }
    },

    "IvaAppSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Defines security for InnovateVA app server.  Allows ports 80 and 443 open to SSC office.",
        "VpcId" : {
          "Ref" : "VpcId"
        },
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "8080",
            "ToPort" : "8080",
            "CidrIp" : "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "8090",
            "ToPort" : "8090",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "0.0.0.0/0"
          }
        ]
      }
    },

    "AppIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Ref" : "IvaNatSecurityGroup"
        },
        "IpProtocol" : "-1",
        "SourceSecurityGroupId" : {
          "Ref" : "IvaAppSecurityGroup"
        },
        "SourceSecurityGroupOwnerId" : "592342700041"
      }
    }    
  },

  "Outputs" : {
    "DNSName" : {
      "Description" : "This is the publicly addressable IP address assigned to the InnovateVA web server.  Will need this for Route53.",
      "Value" : {
        "Fn::GetAtt": [ "IvaAppElasticLoadBalancer", "DNSName" ]
      }
    }
  }
}
